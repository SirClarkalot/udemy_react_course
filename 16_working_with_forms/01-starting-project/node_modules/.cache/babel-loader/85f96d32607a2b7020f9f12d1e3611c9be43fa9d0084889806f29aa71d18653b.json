{"ast":null,"code":"var _jsxFileName = \"/Users/seanclark/code/SirClarkalot/udemy_react_course/16_working_with_forms/01-starting-project/src/components/SimpleInput.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameIsValid, setEnteredNameisValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n    if (event.target.value.trim() !== '') {\n      setEnteredNameisValid(true);\n    }\n  };\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n    if (enteredName.trim() === '') {\n      setEnteredNameisValid(false);\n      setEnteredNameisValid(false);\n    }\n  };\n  const formSubmissionHandler = event => {\n    setEnteredNameTouched(true);\n    event.preventDefault();\n    if (enteredName.trim() === '') {\n      setEnteredNameisValid(false);\n      return;\n    }\n    setEnteredNameisValid(true);\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue);\n    setEnteredName('');\n  };\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        onBlur: nameInputBlurHandler,\n        onChange: nameInputChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"Y+2/B6gMDgiCdib0KI56p38XMio=\");\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useRef","jsxDEV","_jsxDEV","SimpleInput","props","_s","nameInputRef","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameisValid","enteredNameTouched","setEnteredNameTouched","nameInputChangeHandler","event","target","value","trim","nameInputBlurHandler","formSubmissionHandler","preventDefault","console","log","enteredValue","current","nameInputIsInvalid","nameInputClasses","onSubmit","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","id","onBlur","onChange","_c","$RefreshReg$"],"sources":["/Users/seanclark/code/SirClarkalot/udemy_react_course/16_working_with_forms/01-starting-project/src/components/SimpleInput.js"],"sourcesContent":["import { useState, useRef } from \"react\";\n\n\nconst SimpleInput = (props) => {\n\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState('')\n  const [enteredNameIsValid, setEnteredNameisValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false)\n;\n\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n    if (event.target.value.trim() !== '') {\n      setEnteredNameisValid(true)\n    }\n  }\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true)\n    if (enteredName.trim() === '') {\n      setEnteredNameisValid(false)\n      setEnteredNameisValid(false)\n    }\n  }\n\n  const formSubmissionHandler = event => {\n    setEnteredNameTouched(true)\n\n    event.preventDefault();\n\n    if (enteredName.trim() === '') {\n      setEnteredNameisValid(false)\n      return;\n    }\n\n    setEnteredNameisValid(true)\n\n    console.log(enteredName)\n    const enteredValue = nameInputRef.current.value\n    console.log(enteredValue)\n\n    setEnteredName('')\n  }\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched\n\n  const nameInputClasses = nameInputIsInvalid\n  ? 'form-control invalid'\n  : 'form-control';\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input\n         ref={nameInputRef}\n         type='text'\n         id='name'\n         onBlur={nameInputBlurHandler}\n         onChange={nameInputChangeHandler}\n         />\n         {nameInputIsInvalid && <p className=\"error-text\">Name must not be empty</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGzC,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAE7B,MAAMC,YAAY,GAAGN,MAAM,EAAE;EAC7B,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACU,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAACY,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAInE,MAAMc,sBAAsB,GAAGC,KAAK,IAAI;IACtCN,cAAc,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IAClC,IAAIF,KAAK,CAACC,MAAM,CAACC,KAAK,CAACC,IAAI,EAAE,KAAK,EAAE,EAAE;MACpCP,qBAAqB,CAAC,IAAI,CAAC;IAC7B;EACF,CAAC;EAED,MAAMQ,oBAAoB,GAAGJ,KAAK,IAAI;IACpCF,qBAAqB,CAAC,IAAI,CAAC;IAC3B,IAAIL,WAAW,CAACU,IAAI,EAAE,KAAK,EAAE,EAAE;MAC7BP,qBAAqB,CAAC,KAAK,CAAC;MAC5BA,qBAAqB,CAAC,KAAK,CAAC;IAC9B;EACF,CAAC;EAED,MAAMS,qBAAqB,GAAGL,KAAK,IAAI;IACrCF,qBAAqB,CAAC,IAAI,CAAC;IAE3BE,KAAK,CAACM,cAAc,EAAE;IAEtB,IAAIb,WAAW,CAACU,IAAI,EAAE,KAAK,EAAE,EAAE;MAC7BP,qBAAqB,CAAC,KAAK,CAAC;MAC5B;IACF;IAEAA,qBAAqB,CAAC,IAAI,CAAC;IAE3BW,OAAO,CAACC,GAAG,CAACf,WAAW,CAAC;IACxB,MAAMgB,YAAY,GAAGjB,YAAY,CAACkB,OAAO,CAACR,KAAK;IAC/CK,OAAO,CAACC,GAAG,CAACC,YAAY,CAAC;IAEzBf,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC;EAED,MAAMiB,kBAAkB,GAAG,CAAChB,kBAAkB,IAAIE,kBAAkB;EAEpE,MAAMe,gBAAgB,GAAGD,kBAAkB,GACzC,sBAAsB,GACtB,cAAc;EAEhB,oBACEvB,OAAA;IAAMyB,QAAQ,EAAER,qBAAsB;IAAAS,QAAA,gBACpC1B,OAAA;MAAK2B,SAAS,EAAEH,gBAAiB;MAAAE,QAAA,gBAC/B1B,OAAA;QAAO4B,OAAO,EAAC,MAAM;QAAAF,QAAA,EAAC;MAAS;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAQ,eACvChC,OAAA;QACCiC,GAAG,EAAE7B,YAAa;QAClB8B,IAAI,EAAC,MAAM;QACXC,EAAE,EAAC,MAAM;QACTC,MAAM,EAAEpB,oBAAqB;QAC7BqB,QAAQ,EAAE1B;MAAuB;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC/B,EACDT,kBAAkB,iBAAIvB,OAAA;QAAG2B,SAAS,EAAC,YAAY;QAAAD,QAAA,EAAC;MAAsB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACxE,eACNhC,OAAA;MAAK2B,SAAS,EAAC,cAAc;MAAAD,QAAA,eAC3B1B,OAAA;QAAA0B,QAAA,EAAQ;MAAM;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAS;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACnB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACD;AAEX,CAAC;AAAC7B,EAAA,CAnEIF,WAAW;AAAAqC,EAAA,GAAXrC,WAAW;AAqEjB,eAAeA,WAAW;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}