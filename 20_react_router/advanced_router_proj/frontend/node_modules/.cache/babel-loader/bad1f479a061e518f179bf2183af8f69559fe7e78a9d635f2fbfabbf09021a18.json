{"ast":null,"code":"var _jsxFileName = \"/Users/seanclark/code/SirClarkalot/udemy_react_course/20_react_router/advanced_router_proj/frontend/src/components/Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  const events = data.events;\n\n  // if (data.isError) {\n  //   return <p>{data.message}</p>\n  // }\n\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport async function eventLoader() {\n  // cant use hooks like useState in a loader function because they are only available inside the component function\n  const response = await fetch(\"http://localhost:8080/eventskkk\");\n  if (!response.ok) {\n    // return { isError: true, message: 'could not fetch events' }\n    // throw { message: 'could not fetch events'};\n    throw new Response(JSON.stringify({\n      message: 'could not fetch events'\n    }), {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","data","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","eventLoader","response","fetch","ok","Response","JSON","stringify","message","status","$RefreshReg$"],"sources":["/Users/seanclark/code/SirClarkalot/udemy_react_course/20_react_router/advanced_router_proj/frontend/src/components/Events.js"],"sourcesContent":["import { useLoaderData } from 'react-router-dom';\n\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n\n  const data = useLoaderData();\n  const events = data.events;\n\n  // if (data.isError) {\n  //   return <p>{data.message}</p>\n  // }\n\n  return (\n    < EventsList events={events}/>\n  );\n}\n\nexport default EventsPage;\n\nexport async function eventLoader() {\n  // cant use hooks like useState in a loader function because they are only available inside the component function\n  const response = await fetch(\"http://localhost:8080/eventskkk\");\n    if (!response.ok) {\n      // return { isError: true, message: 'could not fetch events' }\n      // throw { message: 'could not fetch events'};\n      throw new Response(JSON.stringify({message: 'could not fetch events'}),{status: 500});\n    } else {\n      return response;\n    }\n }\n"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAEhD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAEpB,MAAMC,IAAI,GAAGN,aAAa,CAAC,CAAC;EAC5B,MAAMO,MAAM,GAAGD,IAAI,CAACC,MAAM;;EAE1B;EACA;EACA;;EAEA,oBACEJ,OAAA,CAAEF,UAAU;IAACM,MAAM,EAAEA;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AAElC;AAACN,EAAA,CAZQD,UAAU;EAAA,QAEJJ,aAAa;AAAA;AAAAY,EAAA,GAFnBR,UAAU;AAcnB,eAAeA,UAAU;AAEzB,OAAO,eAAeS,WAAWA,CAAA,EAAG;EAClC;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;EAC7D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAACC,OAAO,EAAE;IAAwB,CAAC,CAAC,EAAC;MAACC,MAAM,EAAE;IAAG,CAAC,CAAC;EACvF,CAAC,MAAM;IACL,OAAOP,QAAQ;EACjB;AACH;AAAC,IAAAF,EAAA;AAAAU,YAAA,CAAAV,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}