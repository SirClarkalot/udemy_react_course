{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst initialAuthState = {\n  isAuthenitcated: false\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenitcated = true;\n    },\n    logout(state) {\n      state.isAuthenitcated = false;\n    }\n  }\n});\n\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === 'INCREMENT') {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter\n//     };\n//   }\n\n//   if (action.type === 'INCREASE') {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter\n//     };\n//   }\n\n//   if (action.type === 'DECREMENT') {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter\n//     };\n//   }\n\n//   if (action.type === 'TOGGLE')\n//     return {\n//       counter: state.counter,\n//       showCounter: !state.showCounter\n//     }\n//   return state\n// };\n\n// const store = createStore(counterSlice.reducer);\nconst store = configureStore({\n  // value of reducer can be one reducer or many reducers\n  // Can create a map of reducers\n  reducer: {\n    counter: counterSlice.reducer\n  }\n});\n\n// const counterSubscriber = () => {\n//   const latestState = store.getState();\n// }\n\n// store.dispatch({type: 'INCREMENT'})\n\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createStore","createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","increase","action","payload","decrement","toggleCounter","initialAuthState","isAuthenitcated","authSlice","login","logout","store","reducer","counterActions","actions"],"sources":["/Users/seanclark/code/SirClarkalot/udemy_react_course/18_using_redux/redux-demo-project/src/store/index.js"],"sourcesContent":["import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\nconst initialCounterState = { counter: 0, showCounter: true }\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter\n    },\n  }\n});\n\nconst initialAuthState = {\n  isAuthenitcated: false\n};\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: initialAuthState,\n  reducers: {\n    login(state){\n      state.isAuthenitcated = true\n    },\n    logout(state){\n      state.isAuthenitcated = false\n\n    }\n  }\n});\n\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === 'INCREMENT') {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter\n//     };\n//   }\n\n//   if (action.type === 'INCREASE') {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter\n//     };\n//   }\n\n//   if (action.type === 'DECREMENT') {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter\n//     };\n//   }\n\n//   if (action.type === 'TOGGLE')\n//     return {\n//       counter: state.counter,\n//       showCounter: !state.showCounter\n//     }\n//   return state\n// };\n\n// const store = createStore(counterSlice.reducer);\nconst store = configureStore({\n  // value of reducer can be one reducer or many reducers\n  // Can create a map of reducers\n  reducer: {counter: counterSlice.reducer}\n});\n\n// const counterSubscriber = () => {\n//   const latestState = store.getState();\n// }\n\n// store.dispatch({type: 'INCREMENT'})\n\nexport const counterActions = counterSlice.actions\nexport default store\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAE7D,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC/BM,IAAI,EAAE,SAAS;EACfC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAE;IACRC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACP,OAAO,EAAE;IACjB,CAAC;IACDQ,QAAQA,CAACD,KAAK,EAAEE,MAAM,EAAE;MACtBF,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,GAAGS,MAAM,CAACC,OAAO;IAChD,CAAC;IACDC,SAASA,CAACJ,KAAK,EAAE;MACfA,KAAK,CAACP,OAAO,EAAE;IACjB,CAAC;IACDY,aAAaA,CAACL,KAAK,EAAE;MACnBA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IACxC;EACF;AACF,CAAC,CAAC;AAEF,MAAMY,gBAAgB,GAAG;EACvBC,eAAe,EAAE;AACnB,CAAC;AAED,MAAMC,SAAS,GAAGlB,WAAW,CAAC;EAC5BM,IAAI,EAAE,MAAM;EACZC,YAAY,EAAES,gBAAgB;EAC9BR,QAAQ,EAAE;IACRW,KAAKA,CAACT,KAAK,EAAC;MACVA,KAAK,CAACO,eAAe,GAAG,IAAI;IAC9B,CAAC;IACDG,MAAMA,CAACV,KAAK,EAAC;MACXA,KAAK,CAACO,eAAe,GAAG,KAAK;IAE/B;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMI,KAAK,GAAGpB,cAAc,CAAC;EAC3B;EACA;EACAqB,OAAO,EAAE;IAACnB,OAAO,EAAEE,YAAY,CAACiB;EAAO;AACzC,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA;;AAEA,OAAO,MAAMC,cAAc,GAAGlB,YAAY,CAACmB,OAAO;AAClD,eAAeH,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}